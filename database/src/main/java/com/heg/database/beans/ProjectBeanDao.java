package com.heg.database.beans;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.heg.database.beans.ProjectBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_BEAN".
*/
public class ProjectBeanDao extends AbstractDao<ProjectBean, Long> {

    public static final String TABLENAME = "PROJECT_BEAN";

    /**
     * Properties of entity ProjectBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Platform_id = new Property(1, Integer.class, "platform_id", false, "PLATFORM_ID");
        public final static Property Platform_name = new Property(2, String.class, "platform_name", false, "PLATFORM_NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Principal = new Property(5, Double.class, "principal", false, "PRINCIPAL");
        public final static Property Start_time = new Property(6, java.util.Date.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(7, java.util.Date.class, "end_time", false, "END_TIME");
        public final static Property Interest = new Property(8, Double.class, "interest", false, "INTEREST");
        public final static Property Interest_rate = new Property(9, Double.class, "interest_rate", false, "INTEREST_RATE");
        public final static Property Deleted = new Property(10, Boolean.class, "deleted", false, "DELETED");
    };


    public ProjectBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PLATFORM_ID\" INTEGER," + // 1: platform_id
                "\"PLATFORM_NAME\" TEXT," + // 2: platform_name
                "\"TYPE\" TEXT," + // 3: type
                "\"NAME\" TEXT," + // 4: name
                "\"PRINCIPAL\" REAL," + // 5: principal
                "\"START_TIME\" INTEGER," + // 6: start_time
                "\"END_TIME\" INTEGER," + // 7: end_time
                "\"INTEREST\" REAL," + // 8: interest
                "\"INTEREST_RATE\" REAL," + // 9: interest_rate
                "\"DELETED\" INTEGER);"); // 10: deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProjectBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer platform_id = entity.getPlatform_id();
        if (platform_id != null) {
            stmt.bindLong(2, platform_id);
        }
 
        String platform_name = entity.getPlatform_name();
        if (platform_name != null) {
            stmt.bindString(3, platform_name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Double principal = entity.getPrincipal();
        if (principal != null) {
            stmt.bindDouble(6, principal);
        }
 
        java.util.Date start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindLong(7, start_time.getTime());
        }
 
        java.util.Date end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindLong(8, end_time.getTime());
        }
 
        Double interest = entity.getInterest();
        if (interest != null) {
            stmt.bindDouble(9, interest);
        }
 
        Double interest_rate = entity.getInterest_rate();
        if (interest_rate != null) {
            stmt.bindDouble(10, interest_rate);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(11, deleted ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProjectBean readEntity(Cursor cursor, int offset) {
        ProjectBean entity = new ProjectBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // platform_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // platform_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // principal
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // start_time
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // end_time
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // interest
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // interest_rate
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProjectBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlatform_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPlatform_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrincipal(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setStart_time(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setEnd_time(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setInterest(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setInterest_rate(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setDeleted(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProjectBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProjectBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
